<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="525pt" height="726pt"
 viewBox="0.00 0.00 524.63 726.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 722)">
<title>%3</title>
<polygon fill="url(#bg_pattern)" stroke="transparent" points="-4,4 -4,-722 520.63,-722 520.63,4 -4,4"/>
<!-- start -->
<g id="node1" class="node">
<title>start</title>
<ellipse fill="#222222" stroke="#6666ff" stroke-width="3" cx="193.63" cy="-700" rx="38.99" ry="18"/>
<text text-anchor="middle" x="193.63" y="-696.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#ffffff">START</text>
</g>
<!-- 139861210151888_1 -->
<g id="node2" class="node">
<title>139861210151888_1</title>
<ellipse fill="#c0dfb7" stroke="#8dac84" stroke-width="3" cx="193.63" cy="-627" rx="92.88" ry="18"/>
<text text-anchor="middle" x="193.63" y="-623.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#222222">ragproxyagent (1)</text>
</g>
<!-- start&#45;&gt;139861210151888_1 -->
<g id="edge1" class="edge">
<title>start&#45;&gt;139861210151888_1</title>
<path fill="none" stroke="#6666ff" d="M193.63,-681.81C193.63,-673.79 193.63,-664.05 193.63,-655.07"/>
<polygon fill="#6666ff" stroke="#6666ff" points="197.13,-655.03 193.63,-645.03 190.13,-655.03 197.13,-655.03"/>
</g>
<!-- 139861208164240_1 -->
<g id="node3" class="node">
<title>139861208164240_1</title>
<ellipse fill="#faf4d0" stroke="#c7c19d" stroke-width="3" cx="193.63" cy="-540" rx="66.89" ry="18"/>
<text text-anchor="middle" x="193.63" y="-536.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#222222">assistant (1)</text>
</g>
<!-- 139861210151888_1&#45;&gt;139861208164240_1 -->
<g id="edge2" class="edge">
<title>139861210151888_1&#45;&gt;139861208164240_1</title>
<path fill="none" stroke="#6666ff" d="M193.63,-608.8C193.63,-597.16 193.63,-581.55 193.63,-568.24"/>
<polygon fill="#6666ff" stroke="#6666ff" points="197.13,-568.18 193.63,-558.18 190.13,-568.18 197.13,-568.18"/>
<g id="a_edge2&#45;label"><a xlink:title="You&#39;re a retrieve augmented coding assistant. You answer user&#39;s questions based on your own knowledge and the&#10;context provided by the user.&#10;If you can&#39;t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.&#10;For code generation, you must obey the following rules:&#10;Rule 1. You MUST NOT install any packages because all the packages needed are already installed.&#10;Rule 2. You must follow the formats below to write your code:&#10;```language&#10;# your code&#10;```&#10;&#10;User&#39;s question is: How can I use FLAML to perform a classification task and use spark to do parallel training. Train 30 seconds and force cancel jobs if time limit is reached.&#10;&#10;Context is: # Integrate &#45; Spark&#10;&#10;FLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:&#10;&#10;&#45; Use Spark ML estimators for AutoML.&#10;&#45; Use Spark to run training in parallel spark jobs.&#10;&#10;## Spark ML Estimators&#10;&#10;FLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.&#10;&#10;### Data&#10;&#10;For Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas&#45;on&#45;spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.&#10;&#10;This utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas&#45;on&#45;spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas&#45;on&#45;spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.&#10;&#10;This function also accepts optional arguments `index_col` and `default_index_type`.&#10;&#10;&#45; `index_col` is the column name to use as the index, default is None.&#10;&#45; `default_index_type` is the default index type, default is &quot;distributed&#45;sequence&quot;. More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default&#45;index&#45;type)&#10;&#10;Here is an example code snippet for Spark Data:&#10;&#10;```python&#10;import pandas as pd&#10;from flaml.automl.spark.utils import to_pandas_on_spark&#10;&#10;# Creating a dictionary&#10;data = {&#10; &#160;&#160;&#160;&quot;Square_Feet&quot;: [800, 1200, 1800, 1500, 850],&#10; &#160;&#160;&#160;&quot;Age_Years&quot;: [20, 15, 10, 7, 25],&#10; &#160;&#160;&#160;&quot;Price&quot;: [100000, 200000, 300000, 240000, 120000],&#10;}&#10;&#10;# Creating a pandas DataFrame&#10;dataframe = pd.DataFrame(data)&#10;label = &quot;Price&quot;&#10;&#10;# Convert to pandas&#45;on&#45;spark dataframe&#10;psdf = to_pandas_on_spark(dataframe)&#10;```&#10;&#10;To use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.&#10;&#10;Here is an example of how to use it:&#10;&#10;```python&#10;from pyspark.ml.feature import VectorAssembler&#10;&#10;columns = psdf.columns&#10;feature_cols = [col for col in columns if col != label]&#10;featurizer = VectorAssembler(inputCols=feature_cols, outputCol=&quot;features&quot;)&#10;psdf = featurizer.transform(psdf.to_spark(index_col=&quot;index&quot;))[&quot;index&quot;, &quot;features&quot;]&#10;```&#10;&#10;Later in conducting the experiment, use your pandas&#45;on&#45;spark data like non&#45;spark data and pass them using `X_train, y_train` or `dataframe, label`.&#10;&#10;### Estimators&#10;&#10;#### Model List&#10;&#10;&#45; `lgbm_spark`: The class for fine&#45;tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.&#10;&#10;#### Usage&#10;&#10;First, prepare your data in the required format as described in the previous section.&#10;&#10;By including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven&#39;t specified them.&#10;&#10;Here is an example code snippet using SparkML models in AutoML:&#10;&#10;```python&#10;import flaml&#10;&#10;# prepare your data in pandas&#45;on&#45;spark format as we previously mentioned&#10;&#10;automl = flaml.AutoML()&#10;settings = {&#10; &#160;&#160;&#160;&quot;time_budget&quot;: 30,&#10; &#160;&#160;&#160;&quot;metric&quot;: &quot;r2&quot;,&#10; &#160;&#160;&#160;&quot;estimator_list&quot;: [&quot;lgbm_spark&quot;], &#160;# this setting is optional&#10; &#160;&#160;&#160;&quot;task&quot;: &quot;regression&quot;,&#10;}&#10;&#10;automl.fit(&#10; &#160;&#160;&#160;dataframe=psdf,&#10; &#160;&#160;&#160;label=label,&#10; &#160;&#160;&#160;**settings,&#10;)&#10;```&#10;&#10;[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)&#10;&#10;## Parallel Spark Jobs&#10;&#10;You can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use&#45;Cases/Task&#45;Oriented&#45;AutoML#parallel&#45;tuning) and [Hyperparameter Tuning](/docs/Use&#45;Cases/Tune&#45;User&#45;Defined&#45;Function#parallel&#45;tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib&#45;spark`](https://github.com/joblib/joblib&#45;spark).&#10;&#10;Please note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.&#10;&#10;All the Spark&#45;related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:&#10;&#10;&#45; `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.&#10;&#45; `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials &gt; 1, FLAML performes parallel tuning.&#10;&#45; `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark&#45;based model training jobs.&#10;&#10;An example code snippet for using parallel Spark jobs:&#10;&#10;```python&#10;import flaml&#10;&#10;automl_experiment = flaml.AutoML()&#10;automl_settings = {&#10; &#160;&#160;&#160;&quot;time_budget&quot;: 30,&#10; &#160;&#160;&#160;&quot;metric&quot;: &quot;r2&quot;,&#10; &#160;&#160;&#160;&quot;task&quot;: &quot;regression&quot;,&#10; &#160;&#160;&#160;&quot;n_concurrent_trials&quot;: 2,&#10; &#160;&#160;&#160;&quot;use_spark&quot;: True,&#10; &#160;&#160;&#160;&quot;force_cancel&quot;: True, &#160;# Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.&#10;}&#10;&#10;automl.fit(&#10; &#160;&#160;&#160;dataframe=dataframe,&#10; &#160;&#160;&#160;label=label,&#10; &#160;&#160;&#160;**automl_settings,&#10;)&#10;```&#10;&#10;[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)&#10;&#10;" style="cursor: pointer;">
<text font-weight="bold" text-anchor="middle" x="257.63" y="-579.8" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#fafafa">received_message</text>
</a>
</g>
</g>
<!-- 718ebcb7&#45;fa56&#45;4758&#45;808a&#45;bbf915a7fa5d -->
<g id="node4" class="node">
<title>718ebcb7&#45;fa56&#45;4758&#45;808a&#45;bbf915a7fa5d</title>
<polygon fill="#ddfff7" stroke="#00be92" stroke-width="3" points="-0.13,-447.44 54.63,-435 109.39,-447.44 109.34,-467.56 -0.08,-467.56 -0.13,-447.44"/>
<text text-anchor="middle" x="54.63" y="-449.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#222222">OpenAI</text>
</g>
<!-- 139861208164240_1&#45;&gt;718ebcb7&#45;fa56&#45;4758&#45;808a&#45;bbf915a7fa5d -->
<g id="edge3" class="edge">
<title>139861208164240_1&#45;&gt;718ebcb7&#45;fa56&#45;4758&#45;808a&#45;bbf915a7fa5d</title>
<path fill="none" stroke="#6666ff" d="M133.54,-532.02C98.59,-526.58 59.36,-517.63 48.63,-504 42.81,-496.61 42.94,-486.61 45.05,-477.49"/>
<polygon fill="#6666ff" stroke="#6666ff" points="48.45,-478.35 48.05,-467.76 41.76,-476.28 48.45,-478.35"/>
<g id="a_edge3&#45;label"><a xlink:title="Here’s how you can use FLAML to perform a classification task and utilize Spark for parallel training. The following code snippet prepares your data, sets the configuration for training, and trains the model while ensuring that jobs will be canceled if they exceed the time limit of 30 seconds:&#10;&#10;```python&#10;import pandas as pd&#10;from flaml.automl.spark.utils import to_pandas_on_spark&#10;from pyspark.ml.feature import VectorAssembler&#10;import flaml&#10;&#10;# Example data preparation&#10;data = {&#10; &#160;&#160;&#160;&quot;Feature1&quot;: [1, 2, 3, 4, 5],&#10; &#160;&#160;&#160;&quot;Feature2&quot;: [5, 4, 3, 2, 1],&#10; &#160;&#160;&#160;&quot;Label&quot;: [0, 1, 1, 0, 1],&#10;}&#10;&#10;# Create a pandas DataFrame&#10;dataframe = pd.DataFrame(data)&#10;label = &quot;Label&quot;&#10;&#10;# Convert to pandas&#45;on&#45;spark dataframe&#10;psdf = to_pandas_on_spark(dataframe)&#10;&#10;# Vectorize features&#10;columns = psdf.columns&#10;feature_cols = [col for col in columns if col != label]&#10;featurizer = VectorAssembler(inputCols=feature_cols, outputCol=&quot;features&quot;)&#10;psdf = featurizer.transform(psdf.to_spark(index_col=&quot;index&quot;))[&quot;index&quot;, &quot;features&quot;]&#10;&#10;# Configure AutoML settings for classification&#10;automl = flaml.AutoML()&#10;settings = {&#10; &#160;&#160;&#160;&quot;time_budget&quot;: 30,&#10; &#160;&#160;&#160;&quot;metric&quot;: &quot;accuracy&quot;, &#160;# Change this to appropriate classification metric&#10; &#160;&#160;&#160;&quot;task&quot;: &quot;classification&quot;,&#10; &#160;&#160;&#160;&quot;n_concurrent_trials&quot;: 2,&#10; &#160;&#160;&#160;&quot;use_spark&quot;: True,&#10; &#160;&#160;&#160;&quot;force_cancel&quot;: True,&#10;}&#10;&#10;# Fit the model&#10;automl.fit(&#10; &#160;&#160;&#160;dataframe=psdf,&#10; &#160;&#160;&#160;label=label,&#10; &#160;&#160;&#160;**settings,&#10;)&#10;```&#10;&#10;Make sure to adjust your data and the classification metric according to your specific task. This code ensures the use of parallel processing with Spark and that any jobs running over 30 seconds will be forcefully canceled." style="cursor: pointer;">
<text font-weight="bold" text-anchor="middle" x="114.13" y="-492.8" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#fafafa">generate_oai_reply</text>
</a>
</g>
</g>
<!-- 139861210151888_2 -->
<g id="node5" class="node">
<title>139861210151888_2</title>
<ellipse fill="#c0dfb7" stroke="#8dac84" stroke-width="3" cx="226.63" cy="-453" rx="92.88" ry="18"/>
<text text-anchor="middle" x="226.63" y="-449.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#222222">ragproxyagent (2)</text>
</g>
<!-- 139861208164240_1&#45;&gt;139861210151888_2 -->
<g id="edge5" class="edge">
<title>139861208164240_1&#45;&gt;139861210151888_2</title>
<path fill="none" stroke="#6666ff" d="M200.31,-521.8C204.87,-510.05 211.01,-494.24 216.21,-480.84"/>
<polygon fill="#6666ff" stroke="#6666ff" points="219.6,-481.76 219.96,-471.18 213.08,-479.23 219.6,-481.76"/>
<g id="a_edge5&#45;label"><a xlink:title="Here’s how you can use FLAML to perform a classification task and utilize Spark for parallel training. The following code snippet prepares your data, sets the configuration for training, and trains the model while ensuring that jobs will be canceled if they exceed the time limit of 30 seconds:&#10;&#10;```python&#10;import pandas as pd&#10;from flaml.automl.spark.utils import to_pandas_on_spark&#10;from pyspark.ml.feature import VectorAssembler&#10;import flaml&#10;&#10;# Example data preparation&#10;data = {&#10; &#160;&#160;&#160;&quot;Feature1&quot;: [1, 2, 3, 4, 5],&#10; &#160;&#160;&#160;&quot;Feature2&quot;: [5, 4, 3, 2, 1],&#10; &#160;&#160;&#160;&quot;Label&quot;: [0, 1, 1, 0, 1],&#10;}&#10;&#10;# Create a pandas DataFrame&#10;dataframe = pd.DataFrame(data)&#10;label = &quot;Label&quot;&#10;&#10;# Convert to pandas&#45;on&#45;spark dataframe&#10;psdf = to_pandas_on_spark(dataframe)&#10;&#10;# Vectorize features&#10;columns = psdf.columns&#10;feature_cols = [col for col in columns if col != label]&#10;featurizer = VectorAssembler(inputCols=feature_cols, outputCol=&quot;features&quot;)&#10;psdf = featurizer.transform(psdf.to_spark(index_col=&quot;index&quot;))[&quot;index&quot;, &quot;features&quot;]&#10;&#10;# Configure AutoML settings for classification&#10;automl = flaml.AutoML()&#10;settings = {&#10; &#160;&#160;&#160;&quot;time_budget&quot;: 30,&#10; &#160;&#160;&#160;&quot;metric&quot;: &quot;accuracy&quot;, &#160;# Change this to appropriate classification metric&#10; &#160;&#160;&#160;&quot;task&quot;: &quot;classification&quot;,&#10; &#160;&#160;&#160;&quot;n_concurrent_trials&quot;: 2,&#10; &#160;&#160;&#160;&quot;use_spark&quot;: True,&#10; &#160;&#160;&#160;&quot;force_cancel&quot;: True,&#10;}&#10;&#10;# Fit the model&#10;automl.fit(&#10; &#160;&#160;&#160;dataframe=psdf,&#10; &#160;&#160;&#160;label=label,&#10; &#160;&#160;&#160;**settings,&#10;)&#10;```&#10;&#10;Make sure to adjust your data and the classification metric according to your specific task. This code ensures the use of parallel processing with Spark and that any jobs running over 30 seconds will be forcefully canceled." style="cursor: pointer;">
<text font-weight="bold" text-anchor="middle" x="276.63" y="-492.8" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#fafafa">received_message</text>
</a>
</g>
</g>
<!-- 718ebcb7&#45;fa56&#45;4758&#45;808a&#45;bbf915a7fa5d&#45;&gt;139861208164240_1 -->
<g id="edge4" class="edge">
<title>718ebcb7&#45;fa56&#45;4758&#45;808a&#45;bbf915a7fa5d&#45;&gt;139861208164240_1</title>
<path fill="none" stroke="#6666ff" d="M107.71,-467.61C140.51,-476.22 176.87,-486.24 179.63,-489 185.64,-495.01 189.12,-503.36 191.12,-511.53"/>
<polygon fill="#6666ff" stroke="#6666ff" points="187.71,-512.36 192.94,-521.58 194.6,-511.11 187.71,-512.36"/>
</g>
<!-- 139861208164240_2 -->
<g id="node6" class="node">
<title>139861208164240_2</title>
<ellipse fill="#faf4d0" stroke="#c7c19d" stroke-width="3" cx="226.63" cy="-366" rx="66.89" ry="18"/>
<text text-anchor="middle" x="226.63" y="-362.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#222222">assistant (2)</text>
</g>
<!-- 139861210151888_2&#45;&gt;139861208164240_2 -->
<g id="edge6" class="edge">
<title>139861210151888_2&#45;&gt;139861208164240_2</title>
<path fill="none" stroke="#6666ff" d="M226.63,-434.8C226.63,-423.16 226.63,-407.55 226.63,-394.24"/>
<polygon fill="#6666ff" stroke="#6666ff" points="230.13,-394.18 226.63,-384.18 223.13,-394.18 230.13,-394.18"/>
<text text-anchor="middle" x="290.63" y="-405.8" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#fafafa">received_message</text>
</g>
<!-- dd3852b1&#45;0944&#45;48e3&#45;9feb&#45;80977a04d1d1 -->
<g id="node7" class="node">
<title>dd3852b1&#45;0944&#45;48e3&#45;9feb&#45;80977a04d1d1</title>
<polygon fill="#ddfff7" stroke="#00be92" stroke-width="3" points="32.87,-273.44 87.63,-261 142.39,-273.44 142.34,-293.56 32.92,-293.56 32.87,-273.44"/>
<text text-anchor="middle" x="87.63" y="-275.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#222222">OpenAI</text>
</g>
<!-- 139861208164240_2&#45;&gt;dd3852b1&#45;0944&#45;48e3&#45;9feb&#45;80977a04d1d1 -->
<g id="edge7" class="edge">
<title>139861208164240_2&#45;&gt;dd3852b1&#45;0944&#45;48e3&#45;9feb&#45;80977a04d1d1</title>
<path fill="none" stroke="#6666ff" d="M166.54,-358.02C131.59,-352.58 92.36,-343.63 81.63,-330 75.81,-322.61 75.94,-312.61 78.05,-303.49"/>
<polygon fill="#6666ff" stroke="#6666ff" points="81.45,-304.35 81.05,-293.76 74.76,-302.28 81.45,-304.35"/>
<g id="a_edge7&#45;label"><a xlink:title="UPDATE CONTEXT" style="cursor: pointer;">
<text font-weight="bold" text-anchor="middle" x="147.13" y="-318.8" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#fafafa">generate_oai_reply</text>
</a>
</g>
</g>
<!-- 139861210151888_3 -->
<g id="node8" class="node">
<title>139861210151888_3</title>
<ellipse fill="#c0dfb7" stroke="#8dac84" stroke-width="3" cx="259.63" cy="-279" rx="92.88" ry="18"/>
<text text-anchor="middle" x="259.63" y="-275.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#222222">ragproxyagent (3)</text>
</g>
<!-- 139861208164240_2&#45;&gt;139861210151888_3 -->
<g id="edge9" class="edge">
<title>139861208164240_2&#45;&gt;139861210151888_3</title>
<path fill="none" stroke="#6666ff" d="M233.31,-347.8C237.87,-336.05 244.01,-320.24 249.21,-306.84"/>
<polygon fill="#6666ff" stroke="#6666ff" points="252.6,-307.76 252.96,-297.18 246.08,-305.23 252.6,-307.76"/>
<g id="a_edge9&#45;label"><a xlink:title="UPDATE CONTEXT" style="cursor: pointer;">
<text font-weight="bold" text-anchor="middle" x="309.63" y="-318.8" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#fafafa">received_message</text>
</a>
</g>
</g>
<!-- dd3852b1&#45;0944&#45;48e3&#45;9feb&#45;80977a04d1d1&#45;&gt;139861208164240_2 -->
<g id="edge8" class="edge">
<title>dd3852b1&#45;0944&#45;48e3&#45;9feb&#45;80977a04d1d1&#45;&gt;139861208164240_2</title>
<path fill="none" stroke="#6666ff" d="M140.71,-293.61C173.51,-302.22 209.87,-312.24 212.63,-315 218.64,-321.01 222.12,-329.36 224.12,-337.53"/>
<polygon fill="#6666ff" stroke="#6666ff" points="220.71,-338.36 225.94,-347.58 227.6,-337.11 220.71,-338.36"/>
</g>
<!-- 139861208164240_3 -->
<g id="node9" class="node">
<title>139861208164240_3</title>
<ellipse fill="#faf4d0" stroke="#c7c19d" stroke-width="3" cx="259.63" cy="-192" rx="66.89" ry="18"/>
<text text-anchor="middle" x="259.63" y="-188.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#222222">assistant (3)</text>
</g>
<!-- 139861210151888_3&#45;&gt;139861208164240_3 -->
<g id="edge10" class="edge">
<title>139861210151888_3&#45;&gt;139861208164240_3</title>
<path fill="none" stroke="#6666ff" d="M259.63,-260.8C259.63,-249.16 259.63,-233.55 259.63,-220.24"/>
<polygon fill="#6666ff" stroke="#6666ff" points="263.13,-220.18 259.63,-210.18 256.13,-220.18 263.13,-220.18"/>
<g id="a_edge10&#45;label"><a xlink:title="TERMINATE" style="cursor: pointer;">
<text font-weight="bold" text-anchor="middle" x="323.63" y="-231.8" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#fafafa">received_message</text>
</a>
</g>
</g>
<!-- 1726341292.214667 -->
<g id="node10" class="node">
<title>1726341292.214667</title>
<polygon fill="#ddfff7" stroke="#00be92" stroke-width="3" points="328.11,-97.54 328.11,-112.46 287.99,-123 231.26,-123 191.15,-112.46 191.15,-97.54 231.26,-87 287.99,-87 328.11,-97.54"/>
<text text-anchor="middle" x="259.63" y="-101.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#222222">Termination</text>
</g>
<!-- 139861208164240_3&#45;&gt;1726341292.214667 -->
<g id="edge11" class="edge">
<title>139861208164240_3&#45;&gt;1726341292.214667</title>
<path fill="none" stroke="#6666ff" d="M259.63,-173.8C259.63,-162.16 259.63,-146.55 259.63,-133.24"/>
<polygon fill="#6666ff" stroke="#6666ff" points="263.13,-133.18 259.63,-123.18 256.13,-133.18 263.13,-133.18"/>
<text text-anchor="middle" x="388.13" y="-144.8" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#fafafa">check_termination_and_human_reply</text>
</g>
<!-- 1726341292.214944 -->
<g id="node11" class="node">
<title>1726341292.214944</title>
<polygon fill="#ddfff7" stroke="#00be92" stroke-width="3" points="350.19,-36 206.13,-36 169.07,0 313.13,0 350.19,-36"/>
<text text-anchor="middle" x="259.63" y="-14.3" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#222222">Summarize</text>
</g>
<!-- 1726341292.214667&#45;&gt;1726341292.214944 -->
<g id="edge12" class="edge">
<title>1726341292.214667&#45;&gt;1726341292.214944</title>
<path fill="none" stroke="#6666ff" d="M259.63,-86.8C259.63,-75.16 259.63,-59.55 259.63,-46.24"/>
<polygon fill="#6666ff" stroke="#6666ff" points="263.13,-46.18 259.63,-36.18 256.13,-46.18 263.13,-46.18"/>
<text text-anchor="middle" x="341.63" y="-57.8" font-family="Helvetica, DejaVu Sans, Arial, Courier, sans-serif" font-size="14.00" fill="#fafafa">_last_msg_as_summary</text>
</g>
</g>
<defs><pattern height="40" width="40" id="bg_pattern" patternUnits="userSpaceOnUse"><rect x="0" y="0" width="40" height="40" fill="#222222" /><circle cx="15" cy="15" r="14" stroke="#2A2A2A" stroke-width="1" fill="none" /><text x="7" y="19" font-family="Arial" font-size="12" fill="#2A2A2A">AG</text></pattern></defs>
</svg>
